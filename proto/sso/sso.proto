syntax = "proto3";
package sso;

option go_package = "github.com/anon-d/proto/sso;sso";

import "google/protobuf/empty.proto";

service Auth {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Logout(LogoutRequest) returns (google.protobuf.Empty);
    rpc AccessToken(TokenRequest) returns (TokenResponse);
    rpc Validate(ValidateRequest) returns (ValidateResponse);
}

service Directory {
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
}

service Permission {
    rpc Create(CreatePermissionRequest) returns (CreatePermissionResponse);
    rpc Read(ReadPermissionRequest) returns (ReadPermissionResponse);
    rpc Update(UpdatePermissionRequest) returns (UpdatePermissionResponse);
    rpc Delete(DeletePermissionRequest) returns (DeletePermissionResponse);
    rpc AssignPermissionToUser(AssignPermissionRequest) returns (AssignPermissionResponse);
    rpc RemovePermissionFromUser(RemovePermissionRequest) returns (RemovePermissionResponse);
}

// ---- AUTH MESSAGE ----
message RegisterRequest {
    string email = 1;
    string password = 2;
}
message RegisterResponse {
    bytes user_id = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
    int32 app_id = 3;
}
message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

message LogoutRequest {
    string refreshToken = 1;
}

message TokenRequest {
    string refreshToken = 1;
    int32 app_id = 2;
}
message TokenResponse {
    string accessToken = 1;
}

message ValidateRequest {
    string accessToken = 1;
}

message ValidateResponse {
    bool valid = 1;
}

// ---- DIRECTORY MESSAGE ----
message GetUserRequest {
    string accessToken = 1;
}

message GetUserResponse {
    User user = 1;
}

message UpdateUserRequest {
    string accessToken = 1;
    string oldPassword = 2;
    string newPassword = 3;
}

message DeleteUserRequest {
    string accessToken = 1;
}

// ---- PERMISSION MESSAGE ----
message CreatePermissionRequest {
    string name = 1;
}

message CreatePermissionResponse {
    int64 permission_id = 1;
}

message ReadPermissionRequest {
    int64 permission_id = 1;
}

message ReadPermissionResponse {
    string name = 1;
}

message UpdatePermissionRequest {
    int64 permission_id = 1;
    string name = 2;
}

message UpdatePermissionResponse {
    bool success = 1;
}

message DeletePermissionRequest {
    int64 permission_id = 1;
}

message DeletePermissionResponse {
    bool success = 1;
}

message AssignPermissionRequest {
    bytes user_id = 1;
    int64 permission_id = 2;
}

message AssignPermissionResponse {
    bool success = 1;
}

message RemovePermissionRequest {
    bytes user_id = 1;
    int64 permission_id = 2;
}

message RemovePermissionResponse {
    bool success = 1;
}

// ---- IDs (executing users permissions) ----
message UserPermissions {
    bytes user_id = 1;
    repeated int64 permission_ids = 2;
}

// ---- USER MESSAGE STRUCT ----
message User {
    bytes user_id = 1;
    string email = 2;
    repeated string docs = 3;
}
